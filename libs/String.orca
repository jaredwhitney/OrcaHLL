classdef String
	linked func Append (void : String s)
		int q = 0
		char ch = this.GetChar(q)
		while ch != 0
			this
			asm("add ecx, [String.Append.$local.q]")
			asm("sub ecx, 1")
			asm("mov dl, [String.Append.$local.ch]")
			asm("mov [ecx], dl")
			q = q + 1
			ch = this.GetChar(q)
		this
		asm("mov ecx, [String.Append.$local.q]")
		asm("sub ecx, 1")
		asm("mov byte [ecx], 0x0")
	
	linked func GetChar (char : int pos)
		this
		asm("add ecx, [String.GetChar.$local.pos]")
		asm("mov cl, [ecx]")
		asm("and ecx, 0xFF")
	
	linked func SetChar (void : int pos, char ch)
		this
		asm("add ecx, [String.SetChar.$local.pos]")
		asm("mov al, [String.SetChar.$local.ch]")
		asm("mov byte [ecx], al")
		
	linked func AppendChar (void : char ch)
		int length = this.GetLength()
		char blank = 0
		this.SetChar(length, ch)
		this.SetChar(length+1, blank)
	
	linked func RawToWhite (void : null)
		String ret = sys Program.Alloc(this.GetLength()*2)
		int length = this.GetLength()
		byte white = 0xFF
		for int z = 0 : z < length : z = z + 1
			int offs = z * 2
			asm(";			k.")
			char ch = this.GetChar(z * 2)
			ret.SetChar(z * 2, ch)
			ret.SetChar(z * 2 + 1, white)
	
	linked func GetLength (int : null)
		int ret = 0
		char ch = this.GetChar(ret)
		while ch != 0
			ret = ret + 1
			ch = this.GetChar(ret)
		return ret
		
	